// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:1.9.1.84
//      SpecFlow Generator Version:1.9.0.0
//      Runtime Version:4.0.30319.18033
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace Oleg.Kleyman.Winrar.Core.Tests.Integration.Features
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.9.1.84")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("UnrarWrapper")]
    public partial class UnrarWrapperFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "UnrarWrapperFeature.feature"
#line hidden
        
        [NUnit.Framework.TestFixtureSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "UnrarWrapper", "As a Developer I need to unit test\r\ncode and need a wrapper class for the\r\nunrar " +
                    "interop to do it easily.", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.TestFixtureTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Should be able to Open and close archive")]
        public virtual void ShouldBeAbleToOpenAndCloseArchive()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Should be able to Open and close archive", ((string[])(null)));
#line 6
this.ScenarioSetup(scenarioInfo);
#line 7
 testRunner.Given("I have an instance of the NativeMethods object", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 8
 testRunner.And("I instantiate an UnrarWrapper object", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 9
 testRunner.When("I call the the Open method with ..\\..\\..\\..\\..\\..\\Common\\Test\\Oleg.Kleyman.Winrar" +
                    ".Core.Tests.Integration\\TestFolder.rar archive path for List", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 10
 testRunner.Then("I should receive a greater than 0 IntPtr handle back", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 11
 testRunner.When("I call the Close method", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 12
 testRunner.Then("It should return a success value back", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Should return files in archive")]
        public virtual void ShouldReturnFilesInArchive()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Should return files in archive", ((string[])(null)));
#line 14
this.ScenarioSetup(scenarioInfo);
#line 15
 testRunner.Given("I have an instance of the NativeMethods object", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 16
 testRunner.And("I instantiate an UnrarWrapper object", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 17
 testRunner.When("I call the the Open method with ..\\..\\..\\..\\..\\..\\Common\\Test\\Oleg.Kleyman.Winrar" +
                    ".Core.Tests.Integration\\TestFolder.rar archive path for List", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 18
 testRunner.And("I call the GetFiles method", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "HighFlags",
                        "UnpackedSize",
                        "PackedSize",
                        "LastModificationDate",
                        "Name",
                        "Volume",
                        "LowFlags"});
            table1.AddRow(new string[] {
                        "DictionarySize512K",
                        "0",
                        "0",
                        "2012-08-04 09:15:34.000",
                        "TestFolder\\testFile.txt",
                        "C:\\GitRepos\\MainDefault\\Common\\Test\\Oleg.Kleyman.Winrar.Core.Tests.Integration\\Te" +
                            "stFolder.rar",
                        "None"});
            table1.AddRow(new string[] {
                        "DictionarySize512K",
                        "297541",
                        "41",
                        "2012-06-13 22:00:58.000",
                        "test.txt",
                        "C:\\GitRepos\\MainDefault\\Common\\Test\\Oleg.Kleyman.Winrar.Core.Tests.Integration\\Te" +
                            "stFolder.rar",
                        "None"});
            table1.AddRow(new string[] {
                        "DirectoryRecord",
                        "0",
                        "0",
                        "2012-08-04 09:15:22.000",
                        "TestFolder\\InnerTestFolder",
                        "C:\\GitRepos\\MainDefault\\Common\\Test\\Oleg.Kleyman.Winrar.Core.Tests.Integration\\Te" +
                            "stFolder.rar",
                        "None"});
            table1.AddRow(new string[] {
                        "DirectoryRecord",
                        "0",
                        "0",
                        "2012-08-04 09:15:38.000",
                        "TestFolder",
                        "C:\\GitRepos\\MainDefault\\Common\\Test\\Oleg.Kleyman.Winrar.Core.Tests.Integration\\Te" +
                            "stFolder.rar",
                        "None"});
#line 19
 testRunner.Then("I should get the following list back", ((string)(null)), table1, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Files should extract when Extract all is called.")]
        public virtual void FilesShouldExtractWhenExtractAllIsCalled_()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Files should extract when Extract all is called.", ((string[])(null)));
#line 26
this.ScenarioSetup(scenarioInfo);
#line 27
 testRunner.Given("I have an instance of the NativeMethods object", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 28
 testRunner.And("I instantiate an UnrarWrapper object", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 29
 testRunner.When("I call the the Open method with ..\\..\\..\\..\\..\\..\\Common\\Test\\Oleg.Kleyman.Winrar" +
                    ".Core.Tests.Integration\\TestFolder.rar archive path for Extract", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 30
 testRunner.When("I call extract all", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "FullName",
                        "Attributes",
                        "Exists"});
            table2.AddRow(new string[] {
                        "..\\..\\..\\..\\..\\..\\Common\\Test\\Oleg.Kleyman.Winrar.Core.Tests.Integration\\Testing\\" +
                            "TestFolder\\testFile.txt",
                        "Archive",
                        "true"});
            table2.AddRow(new string[] {
                        "..\\..\\..\\..\\..\\..\\Common\\Test\\Oleg.Kleyman.Winrar.Core.Tests.Integration\\Testing\\" +
                            "test.txt",
                        "Archive",
                        "true"});
            table2.AddRow(new string[] {
                        "..\\..\\..\\..\\..\\..\\Common\\Test\\Oleg.Kleyman.Winrar.Core.Tests.Integration\\Testing\\" +
                            "TestFolder\\InnerTestFolder",
                        "Directory",
                        "true"});
            table2.AddRow(new string[] {
                        "..\\..\\..\\..\\..\\..\\Common\\Test\\Oleg.Kleyman.Winrar.Core.Tests.Integration\\Testing\\" +
                            "TestFolder",
                        "Directory",
                        "true"});
#line 31
 testRunner.Then("I should receive the following list of FileSystemMembers back", ((string)(null)), table2, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
